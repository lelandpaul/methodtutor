{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "SimpleAutocomplete.svelte",
    "CardManager.svelte",
    "Login.svelte",
    "Metadata.svelte",
    "MethodAdder.svelte",
    "MethodCards.svelte",
    "MethodDisplay.svelte",
    "SortableTable.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // the list of items  the user can select from\n  export let items = [];\n\n  // field of each item that's used for the labels in the list\n  export let labelFieldName = undefined;\n  export let keywordsFieldName = labelFieldName;\n  export let valueFieldName = undefined;\n\n  export let labelFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return labelFieldName ? item[labelFieldName] : item;\n  };\n\n  export let keywordsFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return keywordsFieldName ? item[keywordsFieldName] : labelFunction(item);\n  };\n\n  export let valueFunction = function(item) {\n    if (item === undefined || item === null) {\n      return item;\n    }\n    return valueFieldName ? item[valueFieldName] : item;\n  };\n\n  export let keywordsCleanFunction = function(keywords) {\n    return keywords;\n  };\n\n  export let textCleanFunction = function(userEnteredText) {\n    return userEnteredText;\n  };\n\n  export let searchFunction = false;\n\n  export let beforeChange = function(oldSelectedItem, newSelectedItem) {\n    return true;\n  };\n  export let onChange = function(newSelectedItem) {};\n\n  export let selectFirstIfEmpty = false;\n\n  export let minCharactersToSearch = 1;\n  export let maxItemsToShowInList = 0;\n  export let noResultsText = \"No results found\";\n\n  const uniqueId = \"sautocomplete-\" + Math.floor(Math.random() * 1000);\n\n  function safeStringFunction(theFunction, argument) {\n    if (typeof theFunction !== \"function\") {\n      console.error(\n        \"Not a function: \" + theFunction + \", argument: \" + argument\n      );\n    }\n    let originalResult;\n    try {\n      originalResult = theFunction(argument);\n    } catch (error) {\n      console.warn(\n        \"Error executing Autocomplete function on value: \" +\n          argument +\n          \" function: \" +\n          theFunction\n      );\n    }\n    let result = originalResult;\n    if (result === undefined || result === null) {\n      result = \"\";\n    }\n    if (typeof result !== \"string\") {\n      result = result.toString();\n    }\n    return result;\n  }\n\n  function safeLabelFunction(item) {\n    // console.log(\"labelFunction: \" + labelFunction);\n    // console.log(\"safeLabelFunction, item: \" + item);\n    return safeStringFunction(labelFunction, item);\n  }\n\n  function safeKeywordsFunction(item) {\n    // console.log(\"safeKeywordsFunction\");\n    const keywords = safeStringFunction(keywordsFunction, item);\n    let result = safeStringFunction(keywordsCleanFunction, keywords);\n    result = result.toLowerCase().trim();\n    if (debug) {\n      console.log(\n        \"Extracted keywords: '\" +\n          result +\n          \"' from item: \" +\n          JSON.stringify(item)\n      );\n    }\n    return result;\n  }\n\n  // the text displayed when no option is selected\n  export let placeholder = undefined;\n  // apply a className to the control\n  export let className = undefined;\n\n  // apply a className to the input control\n  export let inputClassName = undefined;\n\n  // apply a id to the input control\n  export let inputId = undefined;\n\n  // generate an HTML input with this name, containing the current value\n  export let name = undefined;\n\n  // apply a className to the dropdown div\n  export let dropdownClassName = undefined;\n\n  // option to hide the dropdown arrow\n  export let hideArrow = false;\n\n  // option to show clear selection button\n  export let showClear = false;\n\n  // adds the disabled tag to the HTML input\n  export let disabled = false;\n  // add the title to the HTML input\n  export let title = undefined;\n  export let debug = false;\n\n  // selected item state\n  export let selectedItem = undefined;\n  export let value = undefined;\n  let text;\n  let filteredTextLength = 0;\n\n  function onSelectedItemChanged() {\n    value = valueFunction(selectedItem);\n    text = safeLabelFunction(selectedItem);\n    onChange(selectedItem);\n  }\n\n  $: selectedItem, onSelectedItemChanged();\n\n  // HTML elements\n  let input;\n  let list;\n\n  // UI state\n  let opened = false;\n  let highlightIndex = -1;\n\n  $: showList =\n    opened && ((items && items.length > 0) || filteredTextLength > 0);\n\n  // view model\n  let filteredListItems;\n\n  let listItems = [];\n\n  function prepareListItems() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"prepare items to search\");\n      console.log(\"items: \" + JSON.stringify(items));\n    }\n\n    if (!Array.isArray(items)) {\n      console.warn(\n        \"Autocomplete items / search function did not return array but\",\n        items\n      );\n      items = [];\n    }\n\n    const length = items ? items.length : 0;\n    listItems = new Array(length);\n\n    if (length > 0) {\n      items.forEach((item, i) => {\n        const listItem = getListItem(item);\n        if (listItem == undefined) {\n          console.log(\"Undefined item for: \", item);\n        }\n        listItems[i] = listItem;\n      });\n    }\n\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        listItems.length +\n          \" items to search prepared in \" +\n          (tEnd - tStart) +\n          \" milliseconds\"\n      );\n    }\n  }\n\n  function getListItem(item) {\n    return {\n      // keywords representation of the item\n      keywords: safeKeywordsFunction(item),\n      // item label\n      label: safeLabelFunction(item),\n      // store reference to the origial item\n      item: item\n    };\n  }\n\n  $: items, prepareListItems();\n\n  function prepareUserEnteredText(userEnteredText) {\n    if (userEnteredText === undefined || userEnteredText === null) {\n      return \"\";\n    }\n\n    const textFiltered = userEnteredText\n      .replace(/[&/\\\\#,+()$~%.'\":*?<>{}]/g, \" \")\n      .trim();\n\n    filteredTextLength = textFiltered.length;\n\n    if (minCharactersToSearch > 1) {\n      if (filteredTextLength < minCharactersToSearch) {\n        return \"\";\n      }\n    }\n\n    const cleanUserEnteredText = textCleanFunction(textFiltered);\n    const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();\n\n    if (debug) {\n      console.log(\n        \"Change user entered text '\" +\n          userEnteredText +\n          \"' into '\" +\n          textFilteredLowerCase +\n          \"'\"\n      );\n    }\n    return textFilteredLowerCase;\n  }\n\n  async function search() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"Searching user entered text: '\" + text + \"'\");\n    }\n\n    const textFiltered = prepareUserEnteredText(text);\n\n    if (textFiltered === \"\") {\n      filteredListItems = listItems;\n      closeIfMinCharsToSearchReached();\n      if (debug) {\n        console.log(\n          \"User entered text is empty set the list of items to all items\"\n        );\n      }\n      return;\n    }\n\n    if (searchFunction) {\n      items = await searchFunction(textFiltered);\n      prepareListItems();\n    }\n\n    const searchWords = textFiltered.split(\" \");\n\n    let tempfilteredListItems = listItems.filter(listItem => {\n      if (!listItem) {\n        return false;\n      }\n      const itemKeywords = listItem.keywords;\n\n      let matches = 0;\n      searchWords.forEach(searchWord => {\n        if (itemKeywords.includes(searchWord)) {\n          matches++;\n        }\n      });\n\n      return matches >= searchWords.length;\n    });\n\n    const hlfilter = highlightFilter(textFiltered, [\"label\"]);\n    const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);\n\n    filteredListItems = filteredListItemsHighlighted;\n    closeIfMinCharsToSearchReached();\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        \"Search took \" +\n          (tEnd - tStart) +\n          \" milliseconds, found \" +\n          filteredListItems.length +\n          \" items\"\n      );\n    }\n  }\n\n  // $: text, search();\n\n  function selectListItem(listItem) {\n    if (debug) {\n      console.log(\"selectListItem\");\n    }\n    if (\"undefined\" === typeof listItem) {\n      if (debug) {\n        console.log(`listItem ${i} is undefined. Can not select.`);\n      }\n      return false;\n    }\n    const newSelectedItem = listItem.item;\n    if (beforeChange(selectedItem, newSelectedItem)) {\n      selectedItem = newSelectedItem;\n    }\n    return true;\n  }\n\n  function selectItem() {\n    if (debug) {\n      console.log(\"selectItem\");\n    }\n    const listItem = filteredListItems[highlightIndex];\n    if (selectListItem(listItem)) {\n      close();\n    }\n  }\n\n  function up() {\n    if (debug) {\n      console.log(\"up\");\n    }\n\n    open();\n    if (highlightIndex > 0) highlightIndex--;\n    highlight();\n  }\n\n  function down() {\n    if (debug) {\n      console.log(\"down\");\n    }\n\n    open();\n    if (highlightIndex < filteredListItems.length - 1) highlightIndex++;\n    highlight();\n  }\n\n  function highlight() {\n    if (debug) {\n      console.log(\"highlight\");\n    }\n\n    const query = \".selected\";\n    if (debug) {\n      console.log(\"Seaching DOM element: \" + query + \" in \" + list);\n    }\n    const el = list.querySelector(query);\n    if (el) {\n      if (typeof el.scrollIntoViewIfNeeded === \"function\") {\n        if (debug) {\n          console.log(\"Scrolling selected item into view\");\n        }\n        el.scrollIntoViewIfNeeded();\n      } else {\n        if (debug) {\n          console.warn(\n            \"Could not scroll selected item into view, scrollIntoViewIfNeeded not supported\"\n          );\n        }\n      }\n    } else {\n      if (debug) {\n        console.warn(\"Selected item not found to scroll into view\");\n      }\n    }\n  }\n\n  function onListItemClick(listItem) {\n    if (debug) {\n      console.log(\"onListItemClick\");\n    }\n\n    if (selectListItem(listItem)) {\n      close();\n    }\n  }\n\n  function onDocumentClick(e) {\n    if (debug) {\n      console.log(\"onDocumentClick: \" + JSON.stringify(e.target));\n    }\n    if (e.target.closest(\".\" + uniqueId)) {\n      if (debug) {\n        console.log(\"onDocumentClick inside\");\n      }\n      // resetListToAllItemsAndOpen();\n      highlight();\n    } else {\n      if (debug) {\n        console.log(\"onDocumentClick outside\");\n      }\n      close();\n    }\n  }\n\n  function onKeyDown(e) {\n    if (debug) {\n      console.log(\"onKeyDown\");\n    }\n\n    let key = e.key;\n    if (key === \"Tab\" && e.shiftKey) key = \"ShiftTab\";\n    const fnmap = {\n      Tab: opened ? down.bind(this) : null,\n      ShiftTab: opened ? up.bind(this) : null,\n      ArrowDown: down.bind(this),\n      ArrowUp: up.bind(this),\n      Escape: onEsc.bind(this)\n    };\n    const fn = fnmap[key];\n    if (typeof fn === \"function\") {\n      e.preventDefault();\n      fn(e);\n    }\n  }\n\n  function onKeyPress(e) {\n    if (debug) {\n      console.log(\"onKeyPress\");\n    }\n\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      selectItem();\n    }\n  }\n\n  function onInput(e) {\n    if (debug) {\n      console.log(\"onInput\");\n    }\n\n    text = e.target.value;\n    search();\n    highlightIndex = 0;\n    open();\n  }\n\n  function onInputClick() {\n    if (debug) {\n      console.log(\"onInputClick\");\n    }\n    resetListToAllItemsAndOpen();\n  }\n\n  function onEsc(e) {\n    if (debug) {\n      console.log(\"onEsc\");\n    }\n\n    //if (text) return clear();\n    e.stopPropagation();\n    if (opened) {\n      input.focus();\n      close();\n    }\n  }\n\n  function onFocus() {\n    if (debug) {\n      console.log(\"onFocus\");\n    }\n\n    resetListToAllItemsAndOpen();\n  }\n\n  function resetListToAllItemsAndOpen() {\n    if (debug) {\n      console.log(\"resetListToAllItemsAndOpen\");\n    }\n\n    filteredListItems = listItems;\n\n    open();\n\n    // find selected item\n    if (selectedItem) {\n      if (debug) {\n        console.log(\n          \"Searching currently selected item: \" + JSON.stringify(selectedItem)\n        );\n      }\n      for (let i = 0; i < listItems.length; i++) {\n        const listItem = listItems[i];\n        if (\"undefined\" === typeof listItem) {\n          if (debug) {\n            console.log(`listItem ${i} is undefined. Skipping.`);\n          }\n          continue;\n        }\n        if (debug) {\n          console.log(\"Item \" + i + \": \" + JSON.stringify(listItem));\n        }\n        if (selectedItem == listItem.item) {\n          highlightIndex = i;\n          if (debug) {\n            console.log(\n              \"Found selected item: \" + i + \": \" + JSON.stringify(listItem)\n            );\n          }\n          highlight();\n          break;\n        }\n      }\n    }\n  }\n\n  function open() {\n    if (debug) {\n      console.log(\"open\");\n    }\n\n    // check if the search text has more than the min chars required\n    if (isMinCharsToSearchReached()) {\n      return;\n    }\n\n    opened = true;\n  }\n\n  function close() {\n    if (debug) {\n      console.log(\"close\");\n    }\n    opened = false;\n\n    if (!text && selectFirstIfEmpty) {\n      highlightFilter = 0;\n      selectItem();\n    }\n  }\n\n  function isMinCharsToSearchReached() {\n    return (\n      minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch\n    );\n  }\n\n  function closeIfMinCharsToSearchReached() {\n    if (isMinCharsToSearchReached()) {\n      close();\n    }\n  }\n\n  function clear() {\n    if (debug) {\n      console.log(\"clear\");\n    }\n\n    text = \"\";\n    selectedItem = undefined;\n\n    setTimeout(() => {\n      input.focus();\n      close();\n    });\n  }\n\n  function onBlur() {\n    if (debug) {\n      console.log(\"onBlur\");\n    }\n    close();\n  }\n  // 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')\n  function highlightFilter(q, fields) {\n    const qs = \"(\" + q.trim().replace(/\\s/g, \")(.*)(\") + \")\";\n    const reg = new RegExp(qs, \"ig\");\n    let n = 1;\n    const len = qs.split(\")(\").length + 1;\n    let repl = \"\";\n    for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;\n\n    return i => {\n      const newI = Object.assign({ highlighted: {} }, i);\n      if (fields) {\n        fields.forEach(f => {\n          if (!newI[f]) return;\n          newI.highlighted[f] = newI[f].replace(reg, repl);\n        });\n      }\n      return newI;\n    };\n  }\n</script>\n\n<style>\n  .autocomplete {\n    min-width: 200px;\n    display: inline-block;\n    max-width: 100%;\n    position: relative;\n    vertical-align: top;\n    height: 2.25em;\n  }\n\n  .autocomplete:not(.hide-arrow)::after {\n    border: 3px solid transparent;\n    border-radius: 2px;\n    border-right: 0;\n    border-top: 0;\n    content: \" \";\n    display: block;\n    height: 0.625em;\n    margin-top: -0.4375em;\n    pointer-events: none;\n    position: absolute;\n    top: 50%;\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n    -webkit-transform-origin: center;\n    transform-origin: center;\n    width: 0.625em;\n    border-color: #3273dc;\n    right: 1.125em;\n    z-index: 4;\n  }\n\n  .autocomplete.show-clear:not(.hide-arrow)::after {\n    right: 2.3em;\n  }\n\n  .autocomplete * {\n    box-sizing: border-box;\n  }\n  .autocomplete-input {\n    font: inherit;\n    width: 100%;\n    height: 100%;\n    padding: 5px 11px;\n  }\n\n  .autocomplete:not(.hide-arrow) .autocomplete-input {\n    padding-right: 2em;\n  }\n  .autocomplete.show-clear:not(.hide-arrow) .autocomplete-input {\n    padding-right: 3.2em;\n  }\n  .autocomplete.hide-arrow.show-clear .autocomplete-input {\n    padding-right: 2em;\n  }\n\n  .autocomplete-list {\n    background: #fff;\n    position: relative;\n    width: 100%;\n    overflow-y: auto;\n    z-index: 99;\n    padding: 10px 0;\n    top: 0px;\n    border: 1px solid #999;\n    max-height: calc(15 * (1rem + 10px) + 15px);\n    user-select: none;\n  }\n  .autocomplete-list:empty {\n    padding: 0;\n  }\n  .autocomplete-list-item {\n    padding: 5px 15px;\n    color: #333;\n    cursor: pointer;\n    line-height: 1;\n  }\n\n  .autocomplete-list-item:hover,\n  .autocomplete-list-item.selected {\n    background-color: #2e69e2;\n    color: #fff;\n  }\n  .autocomplete-list-item-no-results {\n    padding: 5px 15px;\n    color: #999;\n    line-height: 1;\n  }\n\n  .autocomplete-list.hidden {\n    display: none;\n  }\n\n  .autocomplete.show-clear .autocomplete-clear-button {\n    cursor: pointer;\n    display: block;\n    text-align: center;\n    position: absolute;\n    right: 0.1em;\n    padding: 0.3em 0.6em;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n    z-index: 4;\n  }\n\n  .autocomplete:not(.show-clear) .autocomplete-clear-button {\n    display: none;\n  }\n</style>\n\n<div\n  class=\"{className ? className : ''}\n  {hideArrow ? 'hide-arrow is-multiple' : ''}\n  {showClear ? 'show-clear' : ''} autocomplete select is-fullwidth {uniqueId}\">\n  <input\n    type=\"text\"\n    class=\"{inputClassName ? inputClassName : ''} input autocomplete-input\"\n    id={inputId ? inputId : ''}\n    {placeholder}\n    {name}\n    {disabled}\n    {title}\n    bind:this={input}\n    bind:value={text}\n    on:input={onInput}\n    on:focus={onFocus}\n    on:keydown={onKeyDown}\n    on:click={onInputClick}\n    on:keypress={onKeyPress} />\n  {#if showClear}\n    <span on:click={clear} class=\"autocomplete-clear-button\">&#10006;</span>\n  {/if}\n  <div\n    class=\"{dropdownClassName ? dropdownClassName : ''} autocomplete-list {showList ? '' : 'hidden'}\n    is-fullwidth\"\n    bind:this={list}>\n    {#if filteredListItems && filteredListItems.length > 0}\n      {#each filteredListItems as listItem, i}\n        {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}\n          {#if listItem}\n            <div\n              class=\"autocomplete-list-item {i === highlightIndex ? 'selected' : ''}\"\n              on:click={() => onListItemClick(listItem)}>\n              {#if listItem.highlighted}\n                {@html listItem.highlighted.label}\n              {:else}\n                {@html listItem.label}\n              {/if}\n            </div>\n          {/if}\n        {/if}\n      {/each}\n\n      {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}\n        <div class=\"autocomplete-list-item-no-results\">\n          ...{filteredListItems.length - maxItemsToShowInList} results not shown\n        </div>\n      {/if}\n    {:else if noResultsText}\n      <div class=\"autocomplete-list-item-no-results\">{noResultsText}</div>\n    {/if}\n  </div>\n</div>\n\n<svelte:window on:click={onDocumentClick} />\n",
    "<script>\n  import { get, post, httpDel } from './ajax.js'\n  import { onMount } from 'svelte';\n  import { bellName } from './helpers.js';\n  import SortableTable from './SortableTable.svelte'\n  import MethodAdder from './MethodAdder.svelte'\n\n\n  async function getCardList(){\n    return await get('cards');\n  }\n\n  async function getMethodList(){\n    return await get('user/methods');\n  }\n\n  async function getSettings(){\n    return await get('user/settings');\n  }\n\n  async function deleteMethod(event){\n    httpDel('user/methods',event.detail).then(()=>refresh());\n  }\n\n  async function logout(){\n    post('logout').then((resp) => window.location.href=\"/\");\n  }\n\n  async function sendSettings(){\n    setTimeout(()=>{\n      post('user/settings',\n        { max_reviews: max_reviews,\n          unlimited_reviews: unlimited_reviews,\n          max_new: max_new,\n          unlimited_new: unlimited_new,\n        }\n      )\n    }, 50); // Wait for other values to update\n  }\n\n  let modal_overflow = true;\n  let unlimited_reviews = true;\n  let unlimited_new = false;\n  let max_reviews = 0;\n  let max_new = 0;\n\n\n  getSettings().then((resp)=>{\n    console.log('got settings:', resp);\n    unlimited_reviews = resp.unlimited_reviews\n    unlimited_new = resp.unlimited_new\n    max_reviews = resp.max_reviews\n    max_new = resp.max_new\n  });\n\n  let cards_promise = getCardList();\n  let methods_promise = getMethodList();\n\n  function refresh() {\n    cards_promise = getCardList();\n    methods_promise = getMethodList();\n  }\n\n  let card_headers = {\n    method: 'Method',\n    place_bell: 'Bell',\n    scheduled: 'Next Review',\n    ease: 'Ease',\n  }\n\n  let method_headers = {\n    method: 'Method',\n    total: 'Total',\n  }\n\n\n\n\n</script>\n\n<style>\n  .overflow-visible {\n    overflow: visible !important;\n  }\n\n  .form-row > label {\n    font-weight: bold;\n  }\n\n</style>\n\n\n<div class=\"modal fade\" tabindex=\"-1\" id=\"cardManager\" class:overflow-visible=\"{modal_overflow}\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" class:overflow-visible=\"{modal_overflow}\">\n    <div class=\"modal-content\" class:overflow-visible=\"{modal_overflow}\">\n      <div class=\"modal-header border-bottom-0\">\n\n        <h3 class=\"modal-title\">Method Tutor </h3>\n\n        <ul class=\"nav nav-pills\">\n          <li class=\"nav-item\" role=\"presentation\">\n            <a class=\"nav-link active\" href=\"#tabpanel-methods\" id=\"tab-methods\" data-toggle=\"pill\" role=\"tab\" aria-controls=\"methods\" aria-selected=\"true\" on:focus={refresh} on:click={()=>modal_overflow=true}>Methods</a>\n          </li>\n          <li class=\"nav-item\" role=\"presentation\">\n            <a class=\"nav-link\" href=\"#tabpanel-cards\" id=\"tab-cards\" data-toggle=\"pill\" role=\"tab\" aria-controls=\"cards\" aria-selected=\"false\" on:click={()=>modal_overflow=false}>Cards</a>\n          </li>\n          <li class=\"nav-item\" role=\"presentation\">\n            <a class=\"nav-link\" href=\"#tabpanel-settings\" id=\"tab-settings\" data-toggle=\"pill\" role=\"tab\" aria-controls=\"settings\" aria-selected=\"false\" on:click={()=>modal_overflow=false}>Settings</a>\n          </li>\n        </ul>\n\n\n      </div>\n\n\n      <div class=\"modal-body\" class:overflow-visible=\"{modal_overflow}\">\n\n\n        <div class=\"tab-content\" id=\"tabContent\">\n\n          <div class=\"tab-pane fade show active\" id=\"tabpanel-methods\" role=\"tabpanel\" aria-labelledby=\"tab-methods\">\n            {#await methods_promise then all_methods}\n              <SortableTable data={all_methods} headers={method_headers} remove={true}\n                      on:delete_method={deleteMethod}/>\n            {/await}\n\n            <MethodAdder on:refresh={refresh}/>\n\n          </div>\n\n          <div class=\"tab-pane fade\" id=\"tabpanel-cards\" role=\"tabpanel\" aria-labelledby=\"tab-cards\">\n            {#await cards_promise then all_cards}\n              <SortableTable data={all_cards} headers={card_headers}/>\n            {/await}\n          </div>\n\n          <div class=\"tab-pane fade px-3\" id=\"tabpanel-settings\" role=\"tabpanel\" aria-labelledby=\"tab-settings\">\n\n            <form>\n\n              <div class=\"form-row mb-4\">\n\n\n                <div class=\"col-12 col-lg-5\">\n\n                  <label for=\"user_email\" class=\"pr-5 mb-0 mt-1 font-weight-bold\">\n                    Currently logged in as:\n                  </label>\n\n                </div>\n\n                <div class=\"col-auto col-lg-2\">\n\n                  <input type=\"text\" readonly id=\"user_email\" \n                         value=\"{window.user_email}\"\n                         class=\"align-baseline form-control-plaintext mt-n1\"/>\n\n                </div>\n\n                <div class=\"col-2 text-right p-0\">\n\n                  <button class=\"btn btn-sm btn-danger\"\n                          on:click|preventDefault={logout}>Log Out</button>\n\n                </div>\n\n                <div class=\"col-12\">\n                  <small class=\"form-text text-muted\">\n                    You can change your password on <a href=\"https://ringingroom.co.uk\">Ringing Room</a>.\n                  </small>\n                </div>\n\n              </div>\n\n\n              <div class=\"form-row mb-4\">\n\n\n                <div class=\"col-12 col-lg-5 mb-0 mt-1\">\n\n                  <label for=\"maxReviews\" class=\"pr-5 font-weight-bold\">\n                    Maximum reviews per day:\n                  </label>\n\n                </div>\n\n                <div class=\"col-2\">\n\n                  <input type=\"number\" id=\"maxReviews\" \n                         bind:value={max_reviews}\n                         disabled={unlimited_reviews}\n                         on:blur={sendSettings}\n                         class=\"align-baseline form-control form-control-sm\"/>\n\n                </div>\n\n                <div class=\"col-2\">\n\n                  <div class=\"custom-control custom-checkbox pl-5\">\n\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"maxReviewsUnlimited\"\n                           on:click={sendSettings}\n                           bind:checked={unlimited_reviews}/>\n\n                    <label class=\"custom-control-label\" for=\"maxReviewsUnlimited\">\n                      Unlimited\n                    </label>\n\n                  </div>\n\n                </div>\n\n                <div class=\"col-12\">\n                  <small class=\"form-text text-muted\">\n                    This is the maximum number of unique cards you'll review in a day. (Default: unlimited)\n                  </small>\n                </div>\n\n\n              </div>\n\n              <div class=\"form-row mb-4\">\n\n\n                <div class=\"col-12 col-lg-5 mb-0 mt-1\">\n\n                  <label for=\"maxNew\" class=\"pr-5 font-weight-bold\">\n                    Maximum new cards per day:\n                  </label>\n\n                </div>\n\n                <div class=\"col-2\">\n\n                  <input type=\"number\" id=\"maxNew\" \n                         bind:value={max_new}\n                         disabled={unlimited_new}\n                         on:blur={sendSettings}\n                         class=\"align-baseline form-control form-control-sm\"/>\n\n                </div>\n\n                <div class=\"col-2\">\n\n                  <div class=\"custom-control custom-checkbox pl-5\">\n\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"maxNewUnlimited\"\n                           on:click={sendSettings}\n                           bind:checked={unlimited_new}/>\n\n                    <label class=\"custom-control-label\" for=\"maxNewUnlimited\">\n                      Unlimited\n                    </label>\n\n                  </div>\n\n                </div>\n\n                <div class=\"col-12\">\n                  <small class=\"form-text text-muted\">\n                    This is the maximum number of new cards that will be shown to you on a given day. (Default: 2)\n                  </small>\n                </div>\n\n\n\n              </div>\n\n\n            </form>\n\n\n          </div>\n\n        </div>\n\n\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n",
    "<script>\n  import { post } from './ajax.js';\n\n\n  var email;\n  var password;\n  var remember = false;\n  var flash = '';\n\n  async function submit() {\n    var resp = await post('login', {\n      email: email,\n      password: password,\n      remember: remember,\n    });\n    if (resp.success) {\n      window.location.href=\"/\";\n    } else {\n      email = '';\n      password = '';\n      flash = 'Email or password is incorrect.';\n      console.log('bad login')\n    }\n  }\n\n</script>\n\n<style>\n\n  .card {\n    width: 400px;\n    position: fixed;\n    top: 25%;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n\n\n  strong {\n    color: red;\n  }\n\n\n</style>\n\n<div class=\"card\">\n\n  <div class=\"card-body\">\n\n    <div class=\"card-title text-center\">\n      <h3>\n        Method Tutor\n      </h3>\n    </div>\n\n    <div class=\"card-text\">\n\n    {#if flash}\n      <strong>{flash}</strong>\n    {/if}\n\n\n      <form>\n\n        <div class=\"form-group\">\n\n          <label for=\"emailInput\">Email address</label>\n\n          <input type=\"email\" class=\"form-control\" id=\"emailInput\"\n                  bind:value={email}>\n\n        </div>\n\n        <div class=\"form-group\">\n\n          <label for=\"passwordInput\">Password</label>\n\n          <input type=\"password\" class=\"form-control\" id=\"passwordInput\"\n                  bind:value={password}>\n\n        </div>\n\n        <div class=\"form-group form-check d-inline-block mb-0 mt-2\">\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"rememberCheck\"\n                 bind:checked={remember}/>\n          <label class=\"form-check-label\" for=\"rememberCheck\">Keep me logged in</label>\n        </div>\n\n\n        <button type=\"submit\" class=\"btn btn-primary float-right\"\n                on:click|preventDefault={submit}>Log In</button>\n\n      </form>\n\n      <p class=\"text-muted mb-0 mt-4\">\n        Log in with your <a href=\"https://ringingroom.com\">Ringing Room</a> account.\n      </p>\n\n      <p class=\"text-muted mb-1\">\n        Don't have one? Click <a href=\"https://ringingroom.com/authenticate\">here</a>.\n      </p>\n\n    </div>\n\n  </div>\n\n</div>\n\n\n\n",
    "<script>\n  import { cards_today, mistakes, card_complete } from './stores.js';\n\n  export let bumper_mode;\n\n  let done_message;\n  $: switch ($mistakes) {\n    case 0:\n      done_message = 'Easy'\n      break;\n    case 1:\n    case 2:\n      done_message = 'Good'\n      break;\n    case 3:\n    case 4:\n      done_message = 'Hard'\n      break;\n    default:\n      done_message = 'Relearn'\n      break;\n  }\n\n\n</script>\n\n<style>\n  .card {\n    max-width: 400px;\n    margin: auto;\n  }\n\n  #doneMessage {\n    position: absolute;\n    bottom: 50%;\n    background-color: white;\n    width: 440px;\n    left: -5px;\n  }\n\n  a {\n    color: black;\n  }\n\n  a:hover {\n    color: var(--blue);\n    text-decoration: none;\n  }\n\n</style>\n\n<div class=\"card mb-2\">\n  <div class=\"card-body py-0\">\n\n\n    <h3 class=\"card-title mt-3 mb-3\">\n      Method Tutor\n    </h3>\n\n  </div>\n\n  <ul class=\"list-group list-group-flush\">\n\n    <li class=\"list-group-item list-group-item-action px-3 pt-3 mb-n1\">\n\n      <h6> \n        <a href=\"#\" data-toggle=\"modal\" data-target=\"#cardManager\">\n          <i class=\"fas fa-cog\"></i>\n          Settings\n        </a>\n      </h6>\n\n    </li>\n\n\n    <li class=\"list-group-item p-3 p-lg-4\">\n      Cards remaining:<span class=\"float-right\">{$cards_today}</span>\n    </li>\n  </ul>\n\n</div>\n\n{#if bumper_mode && !$card_complete}\n  <div class=\"card mb-2\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">\n        Bumper mode\n      </h5>\n      <p class=\"card-text\">\n        The card will prevent you from making mistakes this time through.\n      </p>\n    </div>\n  </div>\n{/if}\n\n\n{#if $card_complete}\n  <div class=\"card mb-2\">\n    <div class=\"card-body\">\n      {#if bumper_mode}\n        <h5 class=\"card-title\">\n          Good\n        </h5>\n        <p class=\"card-text\">\n          Bumper mode will be disabled next time.\n        </p>\n      {:else}\n        <h5 class=\"card-title\">\n          {done_message} — {$mistakes} mistakes\n        </h5>\n        <p class=\"card-text\">Press Enter or Up to progress.</p>\n     {/if}\n    </div>\n  </div>\n{/if}\n\n",
    "<svelte:window on:keydown={keyDownHandler}/>\n\n<script>\n  import { get, post } from './ajax.js';\n  import { createEventDispatcher } from 'svelte';\n  import AutoComplete from 'simple-svelte-autocomplete';\n\n\n  let input;\n  let selected;\n  let form;\n\n  const dispatch = createEventDispatcher();\n\n  async function addMethod(){\n    \n    return await post('user/methods', {\n      method_name: input,\n    }).then(()=>dispatch('refresh'));\n  };\n\n  async function getMethods(keyword){\n    const promise = await post('methods', {keyword: keyword})\n    const json = await promise.results;\n    return json;\n  }\n\n  function keyDownHandler(e) {\n    if (e.key === 'Enter' && input){\n      addMethod();\n    }\n  }\n\n</script>\n\n<form id=\"addMethodForm\" class=\"form mt-5\" on:submit|preventDefault={addMethod}>\n\n    <AutoComplete searchFunction={getMethods} \n                  labelFieldName=\"method_name\"\n                  valueFieldName=\"method_name\"\n                  minCharactersToSearch=\"3\"\n                  placeholder=\"Add method...\"\n                  hideArrow\n                  className=\"form-group special-wtf\"\n                  inputClassName=\"form-control\"\n                  bind:selectedItem={selected}\n                  bind:value={input}\n                  />\n\n    <button type=\"submit\" class=\"btn btn-primary\">Add</button>\n</form>\n\n<style>\n  :global(#addMethodForm > .autocomplete) {\n    width: 90%;\n  }\n\n  button {\n    height: 2.25em;\n    float: right;\n  }\n</style>\n\n\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { slide } from 'svelte/transition';\n  import { flip } from 'svelte/animate';\n  import MethodDisplay from './MethodDisplay.svelte';\n  import Card from './Card.svelte';\n  import Metadata from './Metadata.svelte';\n  import CardManager from './CardManager.svelte';\n  import { cur_blueline, cur_treble, cur_bell, stage, cur_method, card_complete, lead_length, cards_today } from './stores.js';\n  import { get, post } from './ajax.js';\n\n  let cur_card;\n  let cards_shown = 0;\n\n  /* Get status, including next card if applicable */\n  async function getStatus(){\n    get('next').then((state)=>{\n      cur_card = state.card;\n      $cards_today = state.cards_remaining;\n      cards_shown++;\n    });\n  }\n\n  /* Post results */\n  async function postResults(card_id, details){\n    let faults = details.mistakes;\n    if (details.bumper_mode) {\n      /* don't report faults in bumper mode... */\n      faults = 0\n    }\n    if (details.gave_up) {\n      /* ...unless we're there because the user gave up */\n      faults = 5;\n    }\n    return await post('card/' + card_id, {card_id: card_id, faults: faults})\n  }\n\n\n  onMount(() => {\n\n    getStatus();\n\n  });\n\n  let show_sidebar = false;\n  let window_width;\n  let no_cards_left = false;\n  $: if (cur_card) { no_cards_left = cur_card.id == null }\n  $: if (window_width > 768 || no_cards_left) { show_sidebar = true };\n  $: if (window_width < 768 && !no_cards_left) { show_sidebar = false };\n\n\n\n</script>\n\n<style>\n\n  #opener {\n    width: 100%;\n    margin: auto;\n    height: 30px;\n  }\n\n\n</style>\n\n<svelte:window bind:innerWidth={window_width}/>\n\n<div class=\"row pt-4 justify-content-center justify-content-md-start\">\n\n  {#if cur_card}\n\n    <div class=\"col-12 col-md-4\">\n\n\n      {#if show_sidebar}\n        <div transition:slide>\n          <Metadata bumper_mode={cur_card.bumper_mode}/>\n        </div>\n      {/if}\n\n      <button class=\"d-md-none d-block mb-2 p-0 btn btn-outline-secondary\"\n              id=\"opener\"\n              style=\"width: {Math.min(400, window_width - 25)}px\"\n              on:click|preventDefault={()=>show_sidebar=!show_sidebar}>\n              <i class=\"fas\"\n                 class:fa-chevron-up={show_sidebar}\n                 class:fa-chevron-down={!show_sidebar}></i>\n      </button>\n\n    </div>\n\n    {#if cur_card.id}\n\n      <div class=\"col-12 col-md-3 text-center\">\n\n\n          <MethodDisplay {...cur_card} {cards_shown} \n            on:trigger_bumper={()=>{cur_card.bumper_mode = true;}}\n            on:report_results={(e)=>postResults(cur_card.id, e.detail)}\n            on:done={getStatus}/>\n\n      </div>\n\n    {:else}\n\n      <h4 >\n        (No more cards today!)\n      </h4>\n\n\n    {/if}\n\n\n\n  {/if}\n\n  <CardManager/>\n\n\n</div>\n",
    "<svelte:window bind:innerWidth={innerWidth} bind:innerHeight={innerHeight}\n               on:keydown={keyDownHandler} on:keyup={keyUpHandler}/>\n\n\n{#if innerWidth}\n\n<Card method={method} bell={place_bell} width={canvas_width} small={cardtext_small}/>\n\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" \n    class:bumper_mode\n    style=\"width:{canvas_width};\n           height: {canvas_height};\"\n          viewBox=\"0 0 {canvas_width} {canvas_height}\"\n        >\n  {#each Array(stage-1) as _, i}\n    <line x1=\"{stage, calcH(i+1.5)}\" y1=\"-10\" \n          x2=\"{stage, calcH(i+1.5)}\" y2=\"910\" \n          style=\"stroke: rgba(0,0,0, 0.125);\n                 stroke-width: 2\"\n          stroke-dasharray=\"{i % 2 == 0 ? '4,4' : '0'}\"/>\n  {/each}\n\n  {#each Array(stage) as _, i}\n    <text x=\"{stage, calcH(i+1)}\" y=\"20\" text-anchor=\"middle\">\n      { bellName(i+1) }\n    </text>\n    <text x=\"{stage, calcH(i+1)}\" y=\"{canvas_height - 10}\" text-anchor=\"middle\">\n      { bellName(i+1) }\n    </text>\n  {/each}\n\n  {#if mistake}\n    <rect x=\"0\" y=\"-10\" width=\"400\" height=\"920\" fill=\"rgba(0,0,0,0.5)\"\n          transition:fade=\"{{duration: 100, easing: sineInOut}}\"/>\n  {/if}\n\n\n  {#if blueline.length != 0}\n\n    <circle cx=\"{calcH(bumper_mode ? blueline[cur_row] : free_blueline[cur_row])}\" cy=\"{calcV(cur_row)}\"\n            r=\"8\" fill=\"{line_color}\" class=\"blueline\"/>\n\n    <path fill=\"transparent\" stroke=\"{line_color}\" stroke-width=\"4\" stroke-linecap=\"round\"\n      d=\"{getPathString(cur_row, bumper_mode ? blueline : free_blueline)}\"/>\n\n  {/if}\n\n  {#if treble_path.length != 0}\n\n    <circle cx=\"{calcH(treble_path[cur_row])}\" cy=\"{calcV(cur_row)}\"\n            r=\"5\" fill=\"red\" class=\"treble\"/>\n\n    <path fill=\"transparent\" stroke=\"red\" stroke-width=\"2\" stroke-linecap=\"round\"\n      d=\"{getPathString(cur_row, treble_path)}\"/>\n\n  {/if}\n\n  {#if $card_complete && mistakes > 0 }\n\n    {#each Array(cur_row) as _, i}\n\n    <circle cx=\"{calcH(blueline[cur_row])}\" cy=\"{calcV(cur_row)}\"\n            r=\"8\" fill=\"{$card_complete ? faded_color : line_color}\" class=\"correction\"/>\n\n        <line x1=\"{calcH(blueline[i])}\" y1=\"{calcV(i)}\"\n              x2=\"{calcH(blueline[i+1])}\" y2=\"{calcV(i+1)}\"\n              style=\"stroke: {$card_complete ? faded_color : line_color};\"\n              stroke-width=\"4\" \n              stroke-linecap=\"round\" \n              class=\"correction\"/>\n\n    {/each}\n  {/if}\n\n</svg>\n{/if}\n\n{#if detectMob()}\n  <TouchHandler width={innerWidth}\n                on:touch={(e)=>handleInput(e.detail.dir)}\n                on:done={(e)=>{resetAll(); dispatch('done')}}/>\n\n<div class=\"row\">\n  <div class=\"col\">\n    <i id=\"leftArrow\" class=\"fas fa-arrow-alt-circle-left\"></i>\n  </div>\n  <div class=\"col\">\n    <i id=\"downArrow\" class=\"fas fa-arrow-alt-circle-down\"></i>\n  </div>\n  <div class=\"col\">\n    <i id=\"rightArrow\" class=\"fas fa-arrow-alt-circle-right\"></i>\n  </div>\n</div>\n{/if}\n\n<style>\n\n  svg {\n    background: #fff;\n    border: 1px solid rgba(0,0,0,.125);\n    border-radius: 0.25em;\n  }\n\n  svg.bumper_mode {\n    background: #eee;\n    border-color: black;\n    border-width: 2px;\n  }\n\n  :global(body) {\n    background: #d3d1dc;\n  }\n\n  .row {\n    padding-top: 3px;\n    font-size: 1.25rem;\n  }\n\n  #leftArrow {\n    transform: rotate(-45deg);\n  }\n\n  #rightArrow {\n    transform: rotate(45deg);\n  }\n\n\n\n</style>\n\n\n<script>\n\n  import { sineInOut } from 'svelte/easing';\n  import { fade } from 'svelte/transition';\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { card_complete, cards_today, mistakes } from './stores.js';\n  import { bellName, detectMob } from './helpers.js';\n  import Card from './Card.svelte';\n  import TouchHandler from './TouchHandler.svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let id = null;\n  export let method = null;\n  export let stage = 8;\n  export let treble_path = [];\n  export let place_bell = 1;\n  export let blueline = [];\n  export let lead_length = 32;\n  export let cards_shown;\n  export let bumper_mode;\n\n  let debounce = false;\n  let input_dir;\n  let mistake;\n  let free_blueline = [place_bell];\n\n  let innerWidth;\n  let innerHeight;\n  $: canvas_width = Math.min(400, innerWidth - 25);\n  $: canvas_height = Math.min(900,innerHeight - 150);\n\n  let cardtext_small = false;\n  $: cardtext_small = canvas_width < 400;\n\n  var treble_pos = 1\n  var cur_row = 0;\n  var cur_pos = place_bell;\n  var prev_pos = cur_pos;\n  var grid_color = '#fff';\n  var line_color = '#05a';\n  var faded_color = '#6bf';\n  var vertical_offset = 40;\n\n  function calcH(place){\n    var place_width = canvas_width / stage;\n    return (place - 0.5) * place_width;\n  }\n\n  function calcV(row) {\n    var row_height = (canvas_height - 2*vertical_offset) / lead_length;\n    return row * row_height + vertical_offset\n  }\n\n  function getPathString(row, positions){\n    let path_string = \"M\" + calcH(positions[0]) + ' ' + calcV(0)\n    for (let i = 1; i <= row; i++){\n      path_string += 'L' + calcH(positions[i]) + ' ' + calcV(i)\n    }\n    return path_string\n  }\n\n  function resetAll() {\n    cur_row = 0;\n    cur_pos = place_bell;\n    treble_pos = 1;\n    free_blueline = [place_bell];\n    gave_up = false;\n  }\n\n  /* $: $cards_so_far, resetAll(); */\n  $: $card_complete = cur_row >= lead_length;\n  $: cards_shown, resetAll()\n\n  function calcLineDiff(){\n    let diff_array = [];\n    let local_mistakes = 0;\n    for (let i = 0; i < free_blueline.length; i++){\n      diff_array.push(blueline[i] - free_blueline[i]);\n    }\n    for (let i = 1; i < diff_array.length; i++){\n      if (diff_array[i] != diff_array[i-1] && diff_array[i] != 0){\n        local_mistakes += 1;\n      }\n    }\n    return local_mistakes;\n  }\n\n  let gave_up = false;\n  function reportResults(){\n    if (!bumper_mode) {\n      $mistakes = calcLineDiff()\n      } else {\n      $mistakes = 0;\n    }\n    dispatch('report_results',{\n      mistakes: $mistakes,\n      gave_up: gave_up,\n      bumper_mode: bumper_mode,\n    });\n  }\n\n  function updateBumper(dir){\n    if (blueline[cur_row] + dir == blueline[cur_row+1]){\n      cur_row += 1;\n    } else {\n      mistake = true;\n      setTimeout(()=>{mistake = false;},100);\n    }\n  }\n\n  function updateFree(dir) {\n    if (cur_pos + dir == treble_path[cur_row+1]) { \n      mistake = true;\n      setTimeout(()=>{mistake = false;},100);\n      return\n    }\n    if (cur_pos == 1 && dir == -1) {\n      return;\n    }\n    if (cur_pos == stage && dir == 1){\n      return;\n    }\n    cur_row += 1;\n    cur_pos += dir;\n    free_blueline.push(cur_pos);\n  }\n\n  $: if ($card_complete) {\n      reportResults()\n  }\n\n  function handleInput(dir){\n    if ($card_complete){\n      return;\n    }\n    let el;\n    if (detectMob()) {\n      switch(dir){\n        case -1:\n          el = document.getElementById('leftArrow')\n          break;\n        case 0:\n          el = document.getElementById('downArrow')\n        case 1:\n          el = document.getElementById('rightArrow')\n      } \n      el.style.color = 'red';\n      setTimeout(()=>el.style.color = 'black', 100);\n    }\n    if (bumper_mode) { updateBumper(dir) }\n    else { updateFree(dir) };\n  }\n\n  function keyDownHandler(e) {\n    if (debounce) { return }\n    switch(e.key) {\n      case \"ArrowLeft\":\n        handleInput(-1)\n        break;\n      case \"ArrowDown\":\n        handleInput(0)\n        break;\n      case \"ArrowRight\":\n        handleInput(1)\n        break;\n      case \"Escape\":\n        resetAll()\n        if (!bumper_mode) {\n          dispatch('trigger_bumper');\n          gave_up = true;\n        }\n        return;\n        break;\n      case \"Space\":\n      case \"ArrowUp\":\n      case \"Enter\":\n        resetAll()\n        if ($card_complete) {\n          dispatch('done');\n        }\n        return;\n        break;\n      default:\n        return;\n        break;\n    }\n  }\n\n  function keyUpHandler(e) {\n    debounce = false;\n  }\n\n</script>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { bellName } from './helpers.js';\n  import { createEventDispatcher } from 'svelte';\n\n  import dayjs from 'dayjs';\n  import relativeTime from 'dayjs/plugin/relativeTime';\n  import isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\n  import isTomorrow from 'dayjs/plugin/isTomorrow';\n  import Timezone from 'dayjs/plugin/Timezone';\n  import utc from 'dayjs/plugin/utc';\n  dayjs.extend(relativeTime);\n  dayjs.extend(isSameOrAfter)\n  dayjs.extend(isTomorrow)\n  dayjs.extend(utc)\n  dayjs.extend(Timezone)\n\n  function formatDate(d){\n    let djs = dayjs.tz(d);\n    if (djs.isBefore(dayjs().add(1, 'days'), 'day')){\n      return 'today';\n    } else if (djs.isBefore(dayjs().add(2, 'days'), 'day')){\n\n      return 'tomorrow';\n    } else {\n      return djs.from(dayjs().startOf('day'));\n    }\n  }\n\n\n  export let data;\n  export let headers;\n  export let remove = false;\n\t\n\t// Holds table sort state.  Initialized to reflect table sorted by id column ascending.\n\tlet sortBy = {col: \"scheduled\", ascending: false};\n\t\n\t$: sort = (column) => {\n\n\t\tif (sortBy.col == column) {\n\t\t\tsortBy.ascending = !sortBy.ascending\n\t\t} else {\n\t\t\tsortBy.col = column\n\t\t\tsortBy.ascending = true\n\t\t}\n\t\t\n\t\t// Modifier to sorting function for ascending or descending\n\t\tlet sortModifier = (sortBy.ascending) ? 1 : -1;\n\t\t\n    let sort = (a, b) => \n      (a[column] < b[column]) \n      ? -1 * sortModifier \n      : (a[column] > b[column]) \n      ? 1 * sortModifier \n      : 0;\n\t\t\n\t\tdata = data.sort(sort);\n\t}\n\n  onMount(()=>{\n    sort('scheduled');\n  });\n\n  const dispatch = createEventDispatcher();\n\n  function triggerDelete(method_name){\n    if (confirm(\"This will delete all cards associated with this method. It cannot be undone. Are you sure you want to proceed?\")){\n      dispatch('delete_method', {\n        method_name: method_name,\n      });\n    }\n  };\n\n</script>\n\n<style>\n.arrow-up {\n  width: 0; \n  height: 0; \n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid black;\n}\n\n.arrow-down {\n  width: 0; \n  height: 0; \n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #000;\n}\n\n.hide {\n  opacity: 0;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n</style>\n\n<table class=\"table table-sm table-striped border-bottom\">\n  <thead>\n    <tr>\n      {#each Object.entries(headers) as [prop, header] (prop)}\n      <th scope=\"col\" class=\"text-left clickable\" on:click={sort(prop)}>\n        {header}\n        <span class:hide=\"{sortBy.col!==prop}\">{ sortBy.ascending ? '▲' : '▼' }</span>\n      </th>\n      {/each}\n      {#if remove}\n        <th scope=\"col\" class=\"text-left\">\n        </th>\n      {/if}\n    </tr>\n  </thead>\n  {#if data.length == 0}\n    <tr>\n      <td colspan=\"42\">\n        <small class=\"text-muted\">(no methods added)</small>\n      </td>\n    </tr>\n  {/if}\n  <tbody>\n      {#each data as card}\n        <tr>\n          {#each Object.entries(headers) as [prop, header] (prop)}\n            <td>\n              {#if prop === 'scheduled'}\n                {formatDate(card.scheduled)}\n              {:else if prop ==='place_bell'}\n                {bellName(card.place_bell)}\n              {:else}\n                {card[prop]}\n              {/if}\n            </td>\n          {/each}\n          {#if remove}\n            <td class=\"text-right\">\n              <a class=\"delete\" href=\"#\" on:click={triggerDelete(card.method)}><i class=\"fas fa-minus-circle text-danger\"></i></a>\n            </td>\n          {/if}\n        </tr>\n      {/each}\n  </tbody>\n</table>\n"
  ],
  "names": [],
  "mappings": "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"
}